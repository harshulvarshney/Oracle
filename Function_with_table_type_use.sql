/*
Offers:
	How to define a record type in Oracle
	How to define a table type in Oracle.
	How to write an Oracle Function.
	How to return a SYS_REFCURSOR from Function.
	How to fill data in table type variable inside oracle function.
	
*/

create or replace TYPE BROKER_GROUP_STATUS_REC force
IS
OBJECT
(
	GROUP_NAME							VARCHAR2(255),
	CLIENTIDENTIFIER  					VARCHAR2(255),
	BROKER_ORGANIZATION_ID     			INTEGER,
	EIN									VARCHAR2(255),
	ENROLLMENT_SETUP_IDENTIFIER 		VARCHAR2(100),
	STATUS        						VARCHAR2(100),
	FROM_DATE							TIMESTAMP(6),
	TO_DATE								TIMESTAMP(6),
	EFF_DATE							TIMESTAMP(6),
	END_DATE							TIMESTAMP(6),
	ENROLLED_EMPLOYEES					INTEGER,
	PENDING_EMPLOYEES					INTEGER,
	GROUP_STATUS						VARCHAR2(50)
);
/

create or replace TYPE BROKER_GROUP_STATUS_TAB IS TABLE OF BROKER_GROUP_STATUS_REC;
/

CREATE OR REPLACE FUNCTION BROKER_GROUP_STATUS_RECORDS(
    IN_BROKER_IDENTIFIER       	IN VARCHAR,         --UNIQUE IDENTIFIER OF BROKER
    IN_RENEWAL_OFFSET_DAYS     	IN INTEGER          --NO OF DAYS FETCHED FROM CONFIGURATION EMPLOYER_PROPOSAL_RENEWAL_REMINDER_NOTIFICATION_DAYS
	)
  RETURN SYS_REFCURSOR  
IS

	V_EMPLOYER_ORGANIZATION_ID NUMBER(19);
	V_CURRENT_DATE             TIMESTAMP(6);
	V_COVERAGE_DAYS_REMAINING  NUMBER(10);
	
	V_IN_OEP_COUNTED           BOOLEAN    := FALSE;
	V_R_FOR_COVERAGE_COUNTED   BOOLEAN    := FALSE;
    V_R_FOR_RELEASE_COUNTED    BOOLEAN    := FALSE;
	V_IN_PROGRESS_COUNTED      BOOLEAN    := FALSE;
	V_R_FOR_RENEWAL_COUNTED    BOOLEAN    := FALSE;
	L_GROUP_STATUS_TAB    	   BROKER_GROUP_STATUS_TAB;
	V_TOTAL_EMPLOYEES		   INTEGER    := 0;
	V_ENROLLED_EMPLOYEES	   INTEGER    := 0;
	N						   INTEGER 	  := 0;
	L_REFCURSOR                SYS_REFCURSOR;
	
BEGIN
	V_CURRENT_DATE         := TRUNC(SYSDATE);
	L_GROUP_STATUS_TAB 	   := BROKER_GROUP_STATUS_TAB();
  
	FOR I IN (SELECT MIN(EFF_DATE) AS EFF_DATE,MAX(END_DATE) AS END_DATE,CLIENTIDENTIFIER,ORG_ID,COMPANY_NAME,EIN,ENROLLMENT_SETUP_IDENTIFIER,
					 STATUS,IS_RENEWAL_INITIATED,EXCHANGE_ID,FROM_DATE,TO_DATE,BROKER_ORGANIZATION_ID
			FROM (SELECT DISTINCT
			C.CLIENTIDENTIFIER,
			EO.ID AS ORG_ID,
            EO.COMPANY_NAME,
            EO.EIN,
            ES.ENROLLMENT_SETUP_IDENTIFIER,
            ES.STATUS,
            ES.IS_RENEWAL_INITIATED,
            ES.EXCHANGE_ID,
            TRUNC(EW.FROM_DATE) AS FROM_DATE,
            TRUNC(EW.TO_DATE) AS TO_DATE,
            TRUNC(EPD.EFFECTIVE_DATE) AS EFF_DATE,
            TRUNC(EPD.COVERAGE_END_DATE) AS END_DATE,
			C.BROKER_ORGANIZATION_ID
            FROM TABLE1 C
            JOIN TABLE2 EO ON EO.EIN = C.EXT_CLIENT_ID
            JOIN TABLE3 ES ON ES.EMPLOYER_ORGANIZATION_ID = EO.ID
            JOIN TABLE4 EPD ON EPD.ENROLLMENT_SETUP_ID = ES.ID
            JOIN TABLE5 EW ON EW.ID = EPD.ENROLLMENT_WINDOW_ID
            WHERE C.DELETED = 0 
			      AND C.STATUS NOT IN ('DELETED') 
				  AND C.CLIENT_TYPE = 0
				  AND EO.DELETED = 0
				  AND ES.CREATOR_USER_ID = IN_BROKER_IDENTIFIER
				  AND ES.STATUS IN (2,6,12,13,14,15,16,19,21)
				  AND ES.DELETED = 0
				  AND EPD.ENROLLMENT_PERIOD_TYPE = 'OEP')
			GROUP BY CLIENTIDENTIFIER,ORG_ID,COMPANY_NAME,EIN,ENROLLMENT_SETUP_IDENTIFIER,STATUS,IS_RENEWAL_INITIATED,EXCHANGE_ID,FROM_DATE,TO_DATE,BROKER_ORGANIZATION_ID
			)
    LOOP
	DBMS_OUTPUT.PUT_LINE(CHR(13)||CHR(10) || 'COMPANY :' || I.COMPANY_NAME);
	--DBMS_OUTPUT.PUT_LINE('ENROLLMENT_SETUP :' || I.ENROLLMENT_SETUP_IDENTIFIER || ', STATUS: ' || I.STATUS || ', RENEWAL_INITIATED: ' || I.IS_RENEWAL_INITIATED);
	--DBMS_OUTPUT.PUT_LINE(I.FROM_DATE || ' <> ' || I.TO_DATE || ' <> ' || I.EFF_DATE || ' <> ' || I.END_DATE);
		
		SELECT COUNT(*) INTO V_TOTAL_EMPLOYEES FROM TABLE6 WHERE EMPLOYER_ORGANIZATION_ID = I.ORG_ID AND DELETED = 0 AND STATUS IN (1); --COUNTING ONLY ACTIVE EMPLOYEES
		SELECT COUNT(*) INTO V_ENROLLED_EMPLOYEES FROM TABLE7 E JOIN STATUS_TYPE ST ON E.STATUS_TYPE_ID = ST.ID
			WHERE E.DELETED = 0
				AND ST.NAME IN ('SUBMITTED','PROCESSING','APPROVED','LSC_SUBMITTED') --STATUS FOR WHICH EMPLOYEE IS CONSIDERED ENROLLED.
				AND E.ENROLLMENT_SETUP_ID = I.ENROLLMENT_SETUP_IDENTIFIER;

		--IN_OEP
		IF I.FROM_DATE <= V_CURRENT_DATE AND I.TO_DATE >= V_CURRENT_DATE AND V_IN_OEP_COUNTED != TRUE
		THEN
			
			
			L_GROUP_STATUS_TAB.EXTEND;
			N := N + 1;
			L_GROUP_STATUS_TAB(N) := BROKER_GROUP_STATUS_REC(I.COMPANY_NAME,I.CLIENTIDENTIFIER,i.BROKER_ORGANIZATION_ID,I.EIN,I.ENROLLMENT_SETUP_IDENTIFIER,I.STATUS,
															 I.FROM_DATE,I.TO_DATE,I.EFF_DATE,I.END_DATE, V_ENROLLED_EMPLOYEES,
															 V_TOTAL_EMPLOYEES-V_ENROLLED_EMPLOYEES,'IN_OEP');
        
			--DBMS_OUTPUT.PUT_LINE('PROPOSAL IS IN OEP');
		END IF;
    
		--READY_FOR_RELEASE
		IF I.TO_DATE < V_CURRENT_DATE AND I.EFF_DATE > V_CURRENT_DATE AND I.STATUS in (2,13,19)
		  AND V_R_FOR_RELEASE_COUNTED != TRUE
		THEN
			L_GROUP_STATUS_TAB.EXTEND;
			N := N + 1;
			L_GROUP_STATUS_TAB(N) := BROKER_GROUP_STATUS_REC(I.COMPANY_NAME,I.CLIENTIDENTIFIER,i.BROKER_ORGANIZATION_ID,I.EIN,I.ENROLLMENT_SETUP_IDENTIFIER,I.STATUS,
															 I.FROM_DATE,I.TO_DATE,I.EFF_DATE,I.END_DATE, V_ENROLLED_EMPLOYEES,
															 V_TOTAL_EMPLOYEES-V_ENROLLED_EMPLOYEES,'READY_FOR_RELEASE');

			--DBMS_OUTPUT.PUT_LINE('PROPOSAL IS READY FOR RELEASE');
		END IF;
		
		--READY_FOR_COVERAGE
		IF I.TO_DATE < V_CURRENT_DATE AND I.EFF_DATE > V_CURRENT_DATE AND I.STATUS IN (12,21)
		   AND V_R_FOR_COVERAGE_COUNTED != TRUE
		THEN
			L_GROUP_STATUS_TAB.EXTEND;
			N := N + 1;
			L_GROUP_STATUS_TAB(N) := BROKER_GROUP_STATUS_REC(I.COMPANY_NAME,I.CLIENTIDENTIFIER,i.BROKER_ORGANIZATION_ID,I.EIN,I.ENROLLMENT_SETUP_IDENTIFIER,I.STATUS,
														     I.FROM_DATE,I.TO_DATE,I.EFF_DATE,I.END_DATE, V_ENROLLED_EMPLOYEES,
														     V_TOTAL_EMPLOYEES-V_ENROLLED_EMPLOYEES,'READY_FOR_COVERAGE');

			--DBMS_OUTPUT.PUT_LINE('PROPOSAL IS READY FOR COVERAGE');
		END IF;
	  
		SELECT EXTRACT( DAY FROM DIFF ) INTO V_COVERAGE_DAYS_REMAINING FROM (SELECT (I.END_DATE - V_CURRENT_DATE) DIFF FROM DUAL);
		--DBMS_OUTPUT.PUT_LINE('COVERAGE_DAYS_REMAINING=' || V_COVERAGE_DAYS_REMAINING || ', RENEWAL_OFFSET_DAYS=' || P_RENEWAL_OFFSET_DAYS || ', PREVIOUS_ES_ID=' || V_PREVIOUS_ES_ID);
		
		--IN_PROGRESS
		IF I.EFF_DATE <= V_CURRENT_DATE AND I.END_DATE >= V_CURRENT_DATE AND I.STATUS IN (12, 21)
			AND (V_COVERAGE_DAYS_REMAINING > IN_RENEWAL_OFFSET_DAYS OR I.IS_RENEWAL_INITIATED = 1 OR IS_RENEWAL_DEADLINE_REACHED(TRUNC(I.END_DATE), I.EXCHANGE_ID) = TRUE)
			  AND V_IN_PROGRESS_COUNTED != TRUE 
		THEN
		
			L_GROUP_STATUS_TAB.EXTEND;
			N := N + 1;
			L_GROUP_STATUS_TAB(N) := BROKER_GROUP_STATUS_REC(I.COMPANY_NAME,I.CLIENTIDENTIFIER,i.BROKER_ORGANIZATION_ID,I.EIN,I.ENROLLMENT_SETUP_IDENTIFIER,I.STATUS,
															 I.FROM_DATE,I.TO_DATE,I.EFF_DATE,I.END_DATE, V_ENROLLED_EMPLOYEES,
															 V_TOTAL_EMPLOYEES-V_ENROLLED_EMPLOYEES,'IN_PROGRESS');

			--DBMS_OUTPUT.PUT_LINE('PROPOSAL IS IN PROCESS');
		END IF;

		--READY_FOR_RENEWAL
		IF I.EFF_DATE < V_CURRENT_DATE AND I.END_DATE >= V_CURRENT_DATE AND I.STATUS IN (12, 21)
			AND V_COVERAGE_DAYS_REMAINING <= IN_RENEWAL_OFFSET_DAYS AND I.IS_RENEWAL_INITIATED = 0
			  AND IS_RENEWAL_DEADLINE_REACHED(TRUNC(I.END_DATE), I.EXCHANGE_ID) != TRUE AND V_R_FOR_RENEWAL_COUNTED != TRUE
		THEN
			L_GROUP_STATUS_TAB.EXTEND;
			N := N + 1;
			L_GROUP_STATUS_TAB(N) := BROKER_GROUP_STATUS_REC(I.COMPANY_NAME,I.CLIENTIDENTIFIER,i.BROKER_ORGANIZATION_ID,I.EIN,I.ENROLLMENT_SETUP_IDENTIFIER,I.STATUS,
															 I.FROM_DATE,I.TO_DATE,I.EFF_DATE,I.END_DATE, V_ENROLLED_EMPLOYEES,
															 V_TOTAL_EMPLOYEES-V_ENROLLED_EMPLOYEES,'READY_FOR_RENEWAL');

			--DBMS_OUTPUT.PUT_LINE('PROPOSAL IS READY FOR RENEWAL');
		END IF;
	END LOOP;
	
	OPEN L_REFCURSOR FOR SELECT * FROM TABLE(L_GROUP_STATUS_TAB);-- WHERE ROWNUM >= IN_START_INDEX AND ROWNUM <= IN_END_INDEX;
	RETURN L_REFCURSOR;
	
END BROKER_GROUP_STATUS_RECORDS;
/

